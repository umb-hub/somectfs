#!/usr/bin/python3
from math import gcd
from Crypto.PublicKey import RSA

n1 = 30292242746036115971017608982999250727717453656432023769003750409813735934710819201974159210260826408436902577095993755936818096216019228802218008805095250945851943575117108739663821796010390678994297744383588214605732433507054131494086784354478249764431583863823040817137498841468964275285759264488873023055232915029362296237879621242004026789135861602389065223171670193449202825454456361675908992418334133239350991783676572498332103136958336603939895528286642315040568556524401592641941738753256750084061561270732457810477455643729432407190682410033927743753783287469005235658010914542487780332979133840894080158961
n2 = 28938691801738590006069983977764214650843494790483455891163386974553753039366793575399500592888800239157529900750083679424173560982678176854248282521343575778206629768377453051008952525524506340336580410386977882351825310392438566743192930344512748403120130603977017740437435741283242099791556820701165392657281203225778765299110741281565941506554552651531981629938373519006523766965115711626502599619617340962108377030931530131444210485402390362821508145113660839057137101420567067990940899994907078517540208039763497143748147370842436428216430228764770034995168387883342764314325625983365837741521286781612972674123
e = 65537

# Get common prime factor
p = gcd(n1,n2)

# Resolve other prime factors
q = n1 // p
r = n2 // p

# Calculate euler's totient
phi = (p-1)*(q-1)

# Calulate private key parameter
d = pow(65537,-1,(phi))

# Build Private Key
private_key = RSA.construct((n1, e, d))

# Save it in PEM format
f = open('mykey1.pem','wb')
f.write(private_key.export_key('PEM'))
f.close()
